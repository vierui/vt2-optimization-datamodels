Process Overview
The script orchestrates a power grid optimization model for an entire year using three representative seasons. Here's what's happening:
1. Data Processing
First, the script runs process_data_for_optimization() from pre.py
It loads grid data (generators, storage units, buses, lines) from the /data/grid directory
It processes time series data from /data/processed for three representative seasons:
Winter (Jan 2-8)
Summer (Jul 31-Aug 6)
Spring/Autumn (Oct 16-22)
2. Optimization for Each Season
For each season, the script:
Creates a network model using the function create_network_for_season()
Configures the network with generators, storage units, transmission lines, and loads
Sets time-varying profiles for generation availability and loads
Runs DC Optimal Power Flow (DCOPF) using CPLEX as the solver
The optimization minimizes the total operational cost
3. Season Results
Each season's optimization produces results with:
Total operational costs
Generator dispatch decisions
Storage charging/discharging patterns
These results are saved as both JSON files and pickled network objects
4. Annual Cost Calculation
The script uses functions from post.py to:
Calculate annual cost by weighting each season's cost:
Winter: 13 weeks × 9,016.66 = 117,216.60
Summer: 13 weeks × 2,459.44 = 31,972.78
Spring/Autumn: 26 weeks × 5,680.51 = 147,693.32
Total annual cost: 296,882.70
Generate detailed cost reports for each season
5. JSON Serialization Issue (Now Fixed)
There was a bug in the save_multi_year_cost_report function in post.py
The problem was NumPy boolean values (bool_) couldn't be directly serialized to JSON
We fixed this by converting them to Python's native boolean type using bool()
Specifically, we fixed expressions like installed > 0.5 that returned NumPy booleans